Создайте приложение shop.
[name] - to create if not exist
(name) or .../name - already exist
-----------------------------------------------------------------------------

step 1: [C]> python manage.py startapp shop (best way to do this on pyCharm)

-----------------------------------------------------------------------------

step 2: move [templates]> inside app-(shop)
        create directory name = appName = [shop]
        copy html into tamplates/<appName>/ [index.html]

-----------------------------------------------------------------------------

step 3: create inside app directory [static]
        create directory name = appName
        copy into .../static/appName [css, fonts, images, js, vendor, <ets/>]

-----------------------------------------------------------------------------

step 4: Откройте templates/login/index.html
        и добавьте тэг <<<< {% load static %} >>>>.
        Данный тег указывает Django, что необходимо
        подгрузить статические файлы для данной html страницы.

-----------------------------------------------------------------------------

step 5: Теперь необходимо откорректировать все ссылки на статические ресурсы href.
        Пример замены фавикона (Фавикон – значок вкладки WEB-страницы).

         Исходная ссылка:

      [   <link rel="icon" type="image/png" href="images/icons/favicon.ico"/>
    a [                     <<< change to django link style >>>
      [   <link rel="icon" type="image/png" href="{% static "login/images/icons/favicon.ico" %}"/>
      [   href="{% static "shop/" %}"/     <-- short form

      [   <script src="vendor/jquery/jquery-3.2.1.min.js"></script>
    b [             <<< change to django link style >>>
      [   <script src= {% static "login/vendor/jquery/jquery-3.2.1.min.js" %} ></script>
      [   src="{% static "shop/images/product-2.jpg" %}"   <-- another way
      |
      [   src="{% static "shop/" %}"  <-- short form with -> [""]
      [   src= {% static "shop/" %}   <-- short form without -> [""]

                                                              |                     sector                 |
      [   <div class="login100-more" style="background-image: | url({% static "log13/images/bg-01.jpg" %}) | "></div>
    c [   url({% static "shop/images/bg_1.jpg" %}) [; - normally exist]
      [   url(/static/shop/images/bg_1.jpg)  <-- another way
      |
      [   url({% static "shop/" %})  <-- short form

-----------------------------------------------------------------------------

step 6: Добавьте приложение appName в setting.py.
        Если не добавите, то статические файлы Django не будет видеть.

INSTALLED_APPS = [
    'django.contrib.admin',
    '...',
    'appName'  <---this added
]

-----------------------------------------------------------------------------

step 7: Создайте appName/urls.py и добавьте следующий код.
        Теперь класс <nameView> будет обрабатывать GET-запросы.

<<<shop.urls>>>
from django.urls import path
from .views import *

urlpatterns = [
	path('', IndexView.as_view()), # если не прописываем путь то видим основную страницу. --> VAGE.urls --> shop.views.
	path('shop/', ShopView.as_view(), name = 'shop')
	]

-----------------------------------------------------------------------------

step 8: В файле urls.py включите приложение shop в маршрут.

<<<VAGE.urls>>>
from django.contrib import admin
from django.urls import path, include  <--include added

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('login.urls'))  # если не прописанно то переходим в shop.urls
]

-----------------------------------------------------------------------------

step 9: Добавьте обработчик (Class based view, CBV).
        Обработчики на основе функций (Function based view, FBV)
        использовать не будем (устарело). .../shop/views.py  <--here

from django.shortcuts import render
from django.views.generic import View
from django.http import HttpResponse

# Create your views here.
class IndexView(View):
	def get(self, request):
		return render(request, 'shop/index.html')

class ShopView(View):
	def get(self, request):
		return render(request, 'shop/shop.html')

-----------------------------------------------------------------------------

step 10: in appName create directory [settings]
         in settings create [base.py] for changes and fast corrections
         in base.py add line [PHONE_NUMBER = '+7 (911) 763 70 37']

         in shop/views.py add [from .settings.base import *]
         in shop/views.py add [{'phone_number': PHONE_NUMBER}]

should be:
class IndexView(View):
	def get(self, request):
		return render(request, 'shop/index.html', {'phone_number': PHONE_NUMBER})   <---- look here, it sends to hlml parameter

move to: .html where u've send in our example it's index.html
find line with phone number and replace with {{ phone_number }}

should be like:
<span class="text">{{ phone_number }}</span>

-----------------------------------------------------------------------------

step 11: Start DJANGO [C]> python manage.py runserver

            while ERROR
         1> Отредактируйте все остальные ссылки в вашей html странице.
         2> Обновите страницу. Убедитесь, что отсутствуют в Console сообщения об ошибках.
         3> Обновите страницу. Фавиком отобразится на вкладке страницы.

-----------------------------------------------------------------------------
Содание простого обработчика GET-запросов на основе классов (CBV) успешно завершено!
-----------------------------------------------------------------------------

step 12: Добавление языков
         in settings.py find: LANGUAGE_CODE

         add instead:
LANGUAGE_CODE = 'ru'
LANGUAGES = ( ('ru', 'Russian'), ('en', 'English') )
LOCALE_PATHS = ( os.path.join(BASE_DIR, 'shop/locale/'), )

         [C]> cd appName  <-- main catalog
            > python ../manage.py makemessages -l ru
            > python ../manage.py makemessages -l en

         it will create shop/locale/  with en & ru
         fill translated graphs in django.po & fix it

         [C]> python ../manage.py makemessages -a
            > python ../manage.py compilemessages

            it will create django.mo

         [C]> python manage.py runserver

-----------------------------------------------------------------------------

step 13: Adding favicon (The icon near the siteName)
<link rel="shortcut icon" type="image/png" href="{% static "shop/images/favicon-32x32.png" %}"/>

-----------------------------------------------------------------------------

step 14: jump to other page
after shop.urls.ru:
urlpatterns = [
	path('', IndexView.as_view()),# если не прописываем путь то видим основную страницу. --> VAGE.urls --> shop.views.
	path('shop/', ShopView.as_view(), name='shop'),
	]

do in html > base.py:
<a class="dropdown-item" href="{% url 'shop' %}">{% trans 'Shop' %}</a>
href="{% url 'shop' %}"   <---this

-----------------------------------------------------------------------------

step 15: make dinamic shop.html

ВАЖНО: незабыть прописать словарь во views.py

               {% for product in products %}                                                                           <---ADDED
    			<div class="col-md-6 col-lg-3 ftco-animate">
    				<div class="product">
    					<a href="#" class="img-prod"><img class="img-fluid" src="/static/{{product.image }}" alt="Colorlib Template">
                            {% if product.discount %}                                                                  <---ADDED
    						<span class="status">{{ product.discount }}</span>                                         <---ADDED
                            {% endif %}                                                                                <---ADDED
    						<div class="overlay"></div>
    					</a>
    					<div class="text py-3 pb-4 px-3 text-center">
    						<h3><a href="#">{{ product.name }}</a></h3>                                                <---ADDED
    						<div class="d-flex">
    							<div class="pricing">
                                    {% if product.discount %}                                                          <---ADDED
                                        <p class="price"><span class="mr-2 price-dc">{{ product.price }}               <---ADDED
                                        </span><span class="price-sale">{{ product.price_sale }}</span></p>            <---ADDED
                                    {% else %}                                                                         <---ADDED
                                        <p class="price"><span>{{ product.price }}</span></p>                          <---ADDED
                                    {% endif %}                                                                        <---ADDED
		    					</div>
	    					</div>
	    					<div class="bottom-area d-flex px-3">
	    						<div class="m-auto d-flex">
	    							<a href="#" class="add-to-cart d-flex justify-content-center align-items-center text-center">
	    								<span><i class="ion-ios-menu"></i></span>
	    							</a>
	    							<a href="#" class="buy-now d-flex justify-content-center align-items-center mx-1">
	    								<span><i class="ion-ios-cart"></i></span>
	    							</a>
	    							<a href="#" class="heart d-flex justify-content-center align-items-center ">
	    								<span><i class="ion-ios-heart"></i></span>
	    							</a>
    							</div>
    						</div>
    					</div>
    				</div>
    			</div>

                {% endfor %}

-----------------------------------------------------------------------------

step 15: Наследование шаблонов.
- create base.html
- cut & copy repetitive sictions (normaly at top and bottom)

- add lines between sections:
    {% block content %}

    {%  endblock %}

- move to page .html file and add:
    {%  extends "shop/base.html" %}
    {% load static %}
    {% load i18n %}

- add in page .html block boundaries
    {% block content %}
        </code/>
    {%  endblock %}

-----------------------------------------------------------------------------

step 16: Svelte
         https://ru.svelte.dev/tutorial/basics
         download node.js
         download temple-master.zip svelte app files

         install commands for svelte:
         [C]> npm install
            > npm run-script build  <--type-enter again if changes are added

            >npm i js-cookie

         in app.svelte: in main:
         <input bind:value={name}>  специальная страка для привязки значений и динамического изменения.

-----------------------------------------------------------------------------

step 17: csrftoken
    1. in .svelte
        const CSRF_TOKEN = Cookies.get('csrftoken');
        const WISHLIST_URL = getRef("wishlist-ref")

        onInterval (async () => {
		const response = awaitfetch (WISHLIST_URL, header: {
											'Contenr-Type': 'application/json',
											'Accept': 'application/json, text-plain, */*',
											'X-Requested-With': 'XMLHttpRequest',
											'X-CSRF_TOKEN': CSRF_TOKEN
										};
										method: 'POST',
										credentials: 'same-origin',
										body: JSON.stringify({})
									});
		console.log(await response.text());

	    },1000);

    2. in .html
         {% csrf_token %}
         <a id="wishlist-ref" hidden="true" href={%  url 'wishlist' %}></a>

    3. in urls.py
        path('wishlist/', WishlistView.as_view(), name='wishlist'),
	    path('wishlist/pic/', lambda request: redirect("https://picsum.photos/100"), name='wishlist-pic')

	4. onInterval (async...   <-- LOOK UP (1)

	5. in view.py
	    def post(self, request):
            global wishlist_count
            if request.is_ajax():
                message = f'WishlistView: {wishlist_count}'
                wishlist_count += 1
                print(message)
            else:
                message = 'Not AJAX request'

                return HttpResponse(message)










Простой обработчик POST-запросов (Проверка имя пользователя и пароля)
step 12: Найдите в .../templates/appName/index.html тег с началом (Форма начинается с <form

        <form class="login100-form validate-form">   <---this
        ...
        code here
        ...
        </form>

        и концом формы (форма завершается </form>

        Добавьте тег в action URL login, метод запроса POST и csrf token.
        CSRF токен предназначен для защиты от межсайтовых атак.
        Т.к. URL POST-запроса совпадает с URL GET-запроса, то необходимо поставить точку.

        <form action="." class="login100-form validate-form" method="post">
            {% csrf_token %}

            add --> action="."
            add --> method="post"
            add --> {% csrf_token %}

-----------------------------------------------------------------------------

step 13: Реализуйте обработчик POST-запросов в nameView.

from django.http import HttpResponse  <---add this

	def post(self, request):
		html = '<html><body>'
		for key, value in request.POST.items():
			html += f'{key}: {value} <br>'
		html += '</body></html>'
		return HttpResponse (html)      <--- add post request

-----------------------------------------------------------------------------
Содание простого обработчика POST-запросов на основе классов (CBV) успешно завершено!
-----------------------------------------------------------------------------








